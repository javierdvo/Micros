
AVRASM ver. 2.1.30  C:\Users\Javier\SkyDrive\Documents\Micros\Piano\List\Piano.asm Tue Nov 04 12:50:56 2014

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega328P
                 ;Program type             : Application
                 ;Clock frequency          : 1.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : Off
                 ;Automatic register allocation : Off
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2303
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0034 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 005e 	JMP  _timer2_compa_isr
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 __RESET:
000034 94f8      	CLI
000035 27ee      	CLR  R30
000036 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000037 e0f1      	LDI  R31,1
000038 bff5      	OUT  MCUCR,R31
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003a e1f8      	LDI  R31,0x18
00003b 95a8      	WDR
00003c b7a4      	IN   R26,MCUSR
00003d 7fa7      	CBR  R26,8
00003e bfa4      	OUT  MCUSR,R26
00003f 93f0 0060 	STS  WDTCSR,R31
000041 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e0a0      	LDI  R26,LOW(__SRAM_START)
00004c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00004d 93ed      	ST   X+,R30
00004e 9701      	SBIW R24,1
00004f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0 INITIALIZATION
000050 e0e0      	LDI  R30,__GPIOR0_INIT
000051 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000052 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000053 bfed      	OUT  SPL,R30
000054 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000055 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000056 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000057 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000058 940c 00bd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ; #include <mega328P.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;  #include <delay.h>
                 ;
                 ; float Cancion[100];
                 ; unsigned long int mseg=0;
                 ; long int Milis[100];
                 ; long int aux;
                 ; unsigned char i,fin, j;
                 ;
                 ; void noTono(){
                 ; 0000 000A void noTono(){
                 
                 	.CSEG
                 _noTono:
                 ; 0000 000B     TCCR1B=0x00;
00005a e0e0      	LDI  R30,LOW(0)
00005b 93e0 0081 	STS  129,R30
                 ; 0000 000C  }
00005d 9508      	RET
                 ;
                 ;interrupt [TIM2_COMPA] void timer2_compa_isr(void)
                 ; 0000 000F {
                 _timer2_compa_isr:
00005e 936a      	ST   -Y,R22
00005f 937a      	ST   -Y,R23
000060 93aa      	ST   -Y,R26
000061 93ba      	ST   -Y,R27
000062 93ea      	ST   -Y,R30
000063 93fa      	ST   -Y,R31
000064 b7ef      	IN   R30,SREG
000065 93ea      	ST   -Y,R30
                 ; 0000 0010   mseg++;
000066 e9a0      	LDI  R26,LOW(_mseg)
000067 e0b4      	LDI  R27,HIGH(_mseg)
000068 940e 058f 	CALL __GETD1P_INC
                +
00006a 5fef     +SUBI R30 , LOW ( - 1 )
00006b 4fff     +SBCI R31 , HIGH ( - 1 )
00006c 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00006d 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00006e 940e 0599 	CALL __PUTDP1_DEC
                 ; 0000 0011 }
000070 91e9      	LD   R30,Y+
000071 bfef      	OUT  SREG,R30
000072 91f9      	LD   R31,Y+
000073 91e9      	LD   R30,Y+
000074 91b9      	LD   R27,Y+
000075 91a9      	LD   R26,Y+
000076 9179      	LD   R23,Y+
000077 9169      	LD   R22,Y+
000078 9518      	RETI
                 ;
                 ; void tono(float frecuencia)
                 ; 0000 0014 {
                 _tono:
                 ; 0000 0015     unsigned int cuentasEnt;
                 ; 0000 0016     float cuentas;
                 ; 0000 0017     cuentas=(500000.0/frecuencia);
000079 9724      	SBIW R28,4
00007a 931a      	ST   -Y,R17
00007b 930a      	ST   -Y,R16
                 ;	frecuencia -> Y+6
                 ;	cuentasEnt -> R16,R17
                 ;	cuentas -> Y+2
                +
00007c 81ee     +LDD R30 , Y + 6
00007d 81ff     +LDD R31 , Y + 6 + 1
00007e 8568     +LDD R22 , Y + 6 + 2
00007f 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000080 e0a0     +LDI R26 , LOW ( 0x48F42400 )
000081 e2b4     +LDI R27 , HIGH ( 0x48F42400 )
000082 ef84     +LDI R24 , BYTE3 ( 0x48F42400 )
000083 e498     +LDI R25 , BYTE4 ( 0x48F42400 )
                 	__GETD2N 0x48F42400
000084 940e 0504 	CALL __DIVF21
                +
000086 83ea     +STD Y + 2 , R30
000087 83fb     +STD Y + 2 + 1 , R31
000088 836c     +STD Y + 2 + 2 , R22
000089 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0018     cuentasEnt=cuentas;
00008a 940e 0446 	CALL __CFD1U
00008c 018f      	MOVW R16,R30
                 ; 0000 0019     if((cuentas-cuentasEnt)>+0.5)
00008d 01f8      	MOVW R30,R16
                +
00008e 81aa     +LDD R26 , Y + 2
00008f 81bb     +LDD R27 , Y + 2 + 1
000090 818c     +LDD R24 , Y + 2 + 2
000091 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000092 2766      	CLR  R22
000093 2777      	CLR  R23
000094 940e 047f 	CALL __CDF1
000096 940e 05a3 	CALL __SWAPD12
000098 940e 04b2 	CALL __SUBF12
00009a 01df      	MOVW R26,R30
00009b 01cb      	MOVW R24,R22
                +
00009c e0e0     +LDI R30 , LOW ( 0x3F000000 )
00009d e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00009e e060     +LDI R22 , BYTE3 ( 0x3F000000 )
00009f e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0000a0 940e 0549 	CALL __CMPF12
0000a2 f009      	BREQ PC+2
0000a3 f410      	BRCC PC+3
0000a4 940c 00a8 	JMP  _0x3
                 ; 0000 001A         cuentasEnt++;
                +
0000a6 5f0f     +SUBI R16 , LOW ( - 1 )
0000a7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 001B     OCR1AH=(cuentasEnt-1)/256;
                 _0x3:
0000a8 01f8      	MOVW R30,R16
0000a9 9731      	SBIW R30,1
0000aa 2fef      	MOV  R30,R31
0000ab e0f0      	LDI  R31,0
0000ac 93e0 0089 	STS  137,R30
                 ; 0000 001C     OCR1AL=(cuentasEnt-1)%256;
0000ae 01d8      	MOVW R26,R16
0000af 9711      	SBIW R26,1
0000b0 01fd      	MOVW R30,R26
0000b1 93e0 0088 	STS  136,R30
                 ; 0000 001D     TCCR1A=0x40;
0000b3 e4e0      	LDI  R30,LOW(64)
0000b4 93e0 0080 	STS  128,R30
                 ; 0000 001E     TCCR1B=0x09;
0000b6 e0e9      	LDI  R30,LOW(9)
0000b7 93e0 0081 	STS  129,R30
                 ; 0000 001F }
0000b9 8119      	LDD  R17,Y+1
0000ba 8108      	LDD  R16,Y+0
0000bb 962a      	ADIW R28,10
0000bc 9508      	RET
                 ;
                 ; void main (void){
                 ; 0000 0021 void main (void){
                 _main:
                 ; 0000 0022     DDRB.1=1; //PB1 de salida
0000bd 9a21      	SBI  0x4,1
                 ; 0000 0023     PORTB.6=1;
0000be 9a2e      	SBI  0x5,6
                 ; 0000 0024     PORTB.7=1;
0000bf 9a2f      	SBI  0x5,7
                 ; 0000 0025     PORTD=0xFF;
0000c0 efef      	LDI  R30,LOW(255)
0000c1 b9eb      	OUT  0xB,R30
                 ; 0000 0026     TCCR2A=0x02;
0000c2 e0e2      	LDI  R30,LOW(2)
0000c3 93e0 00b0 	STS  176,R30
                 ; 0000 0027     TCCR2B=0x02;
0000c5 93e0 00b1 	STS  177,R30
                 ; 0000 0028     OCR2A=124;
0000c7 e7ec      	LDI  R30,LOW(124)
0000c8 93e0 00b3 	STS  179,R30
                 ; 0000 0029     TIMSK2=0x02;
0000ca e0e2      	LDI  R30,LOW(2)
0000cb 93e0 0070 	STS  112,R30
                 ; 0000 002A     #asm("sei")
0000cd 9478      	sei
                 ; 0000 002B     i=0;
0000ce e0e0      	LDI  R30,LOW(0)
0000cf 93e0 0628 	STS  _i,R30
                 ; 0000 002C     fin=0;
0000d1 93e0 0629 	STS  _fin,R30
                 ; 0000 002D     while(1)
                 _0xA:
                 ; 0000 002E     {
                 ; 0000 002F     if(PINB.6==0){
0000d3 991e      	SBIC 0x3,6
0000d4 c031      	RJMP _0xD
                 ; 0000 0030         for(j=0;j++;j<100){
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 93e0 062a 	STS  _j,R30
                 _0xF:
0000d8 91e0 062a 	LDS  R30,_j
0000da 5fef      	SUBI R30,-LOW(1)
0000db 93e0 062a 	STS  _j,R30
0000dd 50e1      	SUBI R30,LOW(1)
0000de f121      	BREQ _0x10
                 ; 0000 0031         Cancion[j]=0;
0000df 91e0 062a 	LDS  R30,_j
0000e1 e0a0      	LDI  R26,LOW(_Cancion)
0000e2 e0b3      	LDI  R27,HIGH(_Cancion)
0000e3 e0f0      	LDI  R31,0
0000e4 940e 0576 	CALL __LSLW2
0000e6 0fae      	ADD  R26,R30
0000e7 1fbf      	ADC  R27,R31
                +
0000e8 e0e0     +LDI R30 , LOW ( 0x0 )
0000e9 e0f0     +LDI R31 , HIGH ( 0x0 )
0000ea e060     +LDI R22 , BYTE3 ( 0x0 )
0000eb e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0000ec 940e 0594 	CALL __PUTDP1
                 ; 0000 0032         Milis[j]=0;      }
0000ee 91e0 062a 	LDS  R30,_j
0000f0 e9a4      	LDI  R26,LOW(_Milis)
0000f1 e0b4      	LDI  R27,HIGH(_Milis)
0000f2 e0f0      	LDI  R31,0
0000f3 940e 0576 	CALL __LSLW2
0000f5 0fae      	ADD  R26,R30
0000f6 1fbf      	ADC  R27,R31
                +
0000f7 e0e0     +LDI R30 , LOW ( 0x0 )
0000f8 e0f0     +LDI R31 , HIGH ( 0x0 )
0000f9 e060     +LDI R22 , BYTE3 ( 0x0 )
0000fa e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0000fb 940e 0594 	CALL __PUTDP1
0000fd 91a0 062a 	LDS  R26,_j
0000ff e6e4      	LDI  R30,LOW(100)
000100 940e 0580 	CALL __LTB12U
000102 cfd5      	RJMP _0xF
                 _0x10:
                 ; 0000 0033         fin=0;}
000103 e0e0      	LDI  R30,LOW(0)
000104 93e0 0629 	STS  _fin,R30
                 ; 0000 0034     if(PINB.7==0){
                 _0xD:
000106 991f      	SBIC 0x3,7
000107 c033      	RJMP _0x11
                 ; 0000 0035         for(i=0;i<fin;i++){
000108 e0e0      	LDI  R30,LOW(0)
000109 93e0 0628 	STS  _i,R30
                 _0x13:
00010b 91e0 0629 	LDS  R30,_fin
00010d 91a0 0628 	LDS  R26,_i
00010f 17ae      	CP   R26,R30
000110 f550      	BRSH _0x14
                 ; 0000 0036             tono(Cancion[i]);
000111 91e0 0628 	LDS  R30,_i
000113 e0a0      	LDI  R26,LOW(_Cancion)
000114 e0b3      	LDI  R27,HIGH(_Cancion)
000115 e0f0      	LDI  R31,0
000116 940e 0576 	CALL __LSLW2
000118 0fae      	ADD  R26,R30
000119 1fbf      	ADC  R27,R31
00011a 940e 0589 	CALL __GETD1P
00011c 940e 059e 	CALL __PUTPARD1
00011e df5a      	RCALL _tono
                 ; 0000 0037             delay_ms(Milis[i]);
00011f 91e0 0628 	LDS  R30,_i
000121 e9a4      	LDI  R26,LOW(_Milis)
000122 e0b4      	LDI  R27,HIGH(_Milis)
000123 e0f0      	LDI  R31,0
000124 940e 0576 	CALL __LSLW2
000126 0fae      	ADD  R26,R30
000127 1fbf      	ADC  R27,R31
000128 940e 0585 	CALL __GETW1P
00012a 93fa      	ST   -Y,R31
00012b 93ea      	ST   -Y,R30
00012c 940e 040d 	CALL _delay_ms
                 ; 0000 0038             noTono();
00012e df2b      	RCALL _noTono
                 ; 0000 0039             delay_ms(150);
00012f e9e6      	LDI  R30,LOW(150)
000130 e0f0      	LDI  R31,HIGH(150)
000131 93fa      	ST   -Y,R31
000132 93ea      	ST   -Y,R30
000133 940e 040d 	CALL _delay_ms
                 ; 0000 003A         }
000135 91e0 0628 	LDS  R30,_i
000137 5fef      	SUBI R30,-LOW(1)
000138 93e0 0628 	STS  _i,R30
00013a cfd0      	RJMP _0x13
                 _0x14:
                 ; 0000 003B     }
                 ; 0000 003C     if (PIND.0==0){
                 _0x11:
00013b 9948      	SBIC 0x9,0
00013c c058      	RJMP _0x15
                 ; 0000 003D          aux=mseg;
00013d 91e0 0490 	LDS  R30,_mseg
00013f 91f0 0491 	LDS  R31,_mseg+1
000141 9160 0492 	LDS  R22,_mseg+2
000143 9170 0493 	LDS  R23,_mseg+3
000145 93e0 0624 	STS  _aux,R30
000147 93f0 0625 	STS  _aux+1,R31
000149 9360 0626 	STS  _aux+2,R22
00014b 9370 0627 	STS  _aux+3,R23
                 ; 0000 003E          tono(261.6);
                +
00014d eced     +LDI R30 , LOW ( 0x4382CCCD )
00014e ecfc     +LDI R31 , HIGH ( 0x4382CCCD )
00014f e862     +LDI R22 , BYTE3 ( 0x4382CCCD )
000150 e473     +LDI R23 , BYTE4 ( 0x4382CCCD )
                 	__GETD1N 0x4382CCCD
000151 940e 059e 	CALL __PUTPARD1
000153 df25      	RCALL _tono
                 ; 0000 003F          delay_ms(30);
000154 e1ee      	LDI  R30,LOW(30)
000155 e0f0      	LDI  R31,HIGH(30)
000156 93fa      	ST   -Y,R31
000157 93ea      	ST   -Y,R30
000158 940e 040d 	CALL _delay_ms
                 ; 0000 0040          while (PIND.0==0);
                 _0x16:
00015a 9b48      	SBIS 0x9,0
00015b cffe      	RJMP _0x16
                 ; 0000 0041          Milis[fin]=mseg-aux;
00015c 91e0 0629 	LDS  R30,_fin
00015e e9a4      	LDI  R26,LOW(_Milis)
00015f e0b4      	LDI  R27,HIGH(_Milis)
000160 e0f0      	LDI  R31,0
000161 940e 0576 	CALL __LSLW2
000163 0fea      	ADD  R30,R26
000164 1ffb      	ADC  R31,R27
000165 010f      	MOVW R0,R30
000166 91a0 0624 	LDS  R26,_aux
000168 91b0 0625 	LDS  R27,_aux+1
00016a 9180 0626 	LDS  R24,_aux+2
00016c 9190 0627 	LDS  R25,_aux+3
00016e 91e0 0490 	LDS  R30,_mseg
000170 91f0 0491 	LDS  R31,_mseg+1
000172 9160 0492 	LDS  R22,_mseg+2
000174 9170 0493 	LDS  R23,_mseg+3
000176 940e 0569 	CALL __SUBD12
000178 01d0      	MOVW R26,R0
000179 940e 0594 	CALL __PUTDP1
                 ; 0000 0042          Cancion[fin++]=261.6;
00017b 91e0 0629 	LDS  R30,_fin
00017d 5fef      	SUBI R30,-LOW(1)
00017e 93e0 0629 	STS  _fin,R30
000180 50e1      	SUBI R30,LOW(1)
000181 e0a0      	LDI  R26,LOW(_Cancion)
000182 e0b3      	LDI  R27,HIGH(_Cancion)
000183 e0f0      	LDI  R31,0
000184 940e 0576 	CALL __LSLW2
000186 0fae      	ADD  R26,R30
000187 1fbf      	ADC  R27,R31
                +
000188 eced     +LDI R30 , LOW ( 0x4382CCCD )
000189 ecfc     +LDI R31 , HIGH ( 0x4382CCCD )
00018a e862     +LDI R22 , BYTE3 ( 0x4382CCCD )
00018b e473     +LDI R23 , BYTE4 ( 0x4382CCCD )
                 	__GETD1N 0x4382CCCD
00018c 940e 0594 	CALL __PUTDP1
                 ; 0000 0043        noTono();
00018e decb      	RCALL _noTono
                 ; 0000 0044        delay_ms(30);
00018f e1ee      	LDI  R30,LOW(30)
000190 e0f0      	LDI  R31,HIGH(30)
000191 93fa      	ST   -Y,R31
000192 93ea      	ST   -Y,R30
000193 940e 040d 	CALL _delay_ms
                 ; 0000 0045     }
                 ; 0000 0046     if (PIND.1==0){
                 _0x15:
000195 9949      	SBIC 0x9,1
000196 c058      	RJMP _0x19
                 ; 0000 0047          aux=mseg;
000197 91e0 0490 	LDS  R30,_mseg
000199 91f0 0491 	LDS  R31,_mseg+1
00019b 9160 0492 	LDS  R22,_mseg+2
00019d 9170 0493 	LDS  R23,_mseg+3
00019f 93e0 0624 	STS  _aux,R30
0001a1 93f0 0625 	STS  _aux+1,R31
0001a3 9360 0626 	STS  _aux+2,R22
0001a5 9370 0627 	STS  _aux+3,R23
                 ; 0000 0048          tono(293.6);
                +
0001a7 eced     +LDI R30 , LOW ( 0x4392CCCD )
0001a8 ecfc     +LDI R31 , HIGH ( 0x4392CCCD )
0001a9 e962     +LDI R22 , BYTE3 ( 0x4392CCCD )
0001aa e473     +LDI R23 , BYTE4 ( 0x4392CCCD )
                 	__GETD1N 0x4392CCCD
0001ab 940e 059e 	CALL __PUTPARD1
0001ad decb      	RCALL _tono
                 ; 0000 0049          delay_ms(30);
0001ae e1ee      	LDI  R30,LOW(30)
0001af e0f0      	LDI  R31,HIGH(30)
0001b0 93fa      	ST   -Y,R31
0001b1 93ea      	ST   -Y,R30
0001b2 940e 040d 	CALL _delay_ms
                 ; 0000 004A          while (PIND.1==0);
                 _0x1A:
0001b4 9b49      	SBIS 0x9,1
0001b5 cffe      	RJMP _0x1A
                 ; 0000 004B          Milis[fin]=mseg-aux;
0001b6 91e0 0629 	LDS  R30,_fin
0001b8 e9a4      	LDI  R26,LOW(_Milis)
0001b9 e0b4      	LDI  R27,HIGH(_Milis)
0001ba e0f0      	LDI  R31,0
0001bb 940e 0576 	CALL __LSLW2
0001bd 0fea      	ADD  R30,R26
0001be 1ffb      	ADC  R31,R27
0001bf 010f      	MOVW R0,R30
0001c0 91a0 0624 	LDS  R26,_aux
0001c2 91b0 0625 	LDS  R27,_aux+1
0001c4 9180 0626 	LDS  R24,_aux+2
0001c6 9190 0627 	LDS  R25,_aux+3
0001c8 91e0 0490 	LDS  R30,_mseg
0001ca 91f0 0491 	LDS  R31,_mseg+1
0001cc 9160 0492 	LDS  R22,_mseg+2
0001ce 9170 0493 	LDS  R23,_mseg+3
0001d0 940e 0569 	CALL __SUBD12
0001d2 01d0      	MOVW R26,R0
0001d3 940e 0594 	CALL __PUTDP1
                 ; 0000 004C          Cancion[fin++]=293.6;
0001d5 91e0 0629 	LDS  R30,_fin
0001d7 5fef      	SUBI R30,-LOW(1)
0001d8 93e0 0629 	STS  _fin,R30
0001da 50e1      	SUBI R30,LOW(1)
0001db e0a0      	LDI  R26,LOW(_Cancion)
0001dc e0b3      	LDI  R27,HIGH(_Cancion)
0001dd e0f0      	LDI  R31,0
0001de 940e 0576 	CALL __LSLW2
0001e0 0fae      	ADD  R26,R30
0001e1 1fbf      	ADC  R27,R31
                +
0001e2 eced     +LDI R30 , LOW ( 0x4392CCCD )
0001e3 ecfc     +LDI R31 , HIGH ( 0x4392CCCD )
0001e4 e962     +LDI R22 , BYTE3 ( 0x4392CCCD )
0001e5 e473     +LDI R23 , BYTE4 ( 0x4392CCCD )
                 	__GETD1N 0x4392CCCD
0001e6 940e 0594 	CALL __PUTDP1
                 ; 0000 004D         noTono();
0001e8 de71      	RCALL _noTono
                 ; 0000 004E         delay_ms(30);
0001e9 e1ee      	LDI  R30,LOW(30)
0001ea e0f0      	LDI  R31,HIGH(30)
0001eb 93fa      	ST   -Y,R31
0001ec 93ea      	ST   -Y,R30
0001ed 940e 040d 	CALL _delay_ms
                 ; 0000 004F     }
                 ; 0000 0050     if (PIND.2==0){
                 _0x19:
0001ef 994a      	SBIC 0x9,2
0001f0 c058      	RJMP _0x1D
                 ; 0000 0051         aux=mseg;
0001f1 91e0 0490 	LDS  R30,_mseg
0001f3 91f0 0491 	LDS  R31,_mseg+1
0001f5 9160 0492 	LDS  R22,_mseg+2
0001f7 9170 0493 	LDS  R23,_mseg+3
0001f9 93e0 0624 	STS  _aux,R30
0001fb 93f0 0625 	STS  _aux+1,R31
0001fd 9360 0626 	STS  _aux+2,R22
0001ff 9370 0627 	STS  _aux+3,R23
                 ; 0000 0052          tono(329.6);
                +
000201 eced     +LDI R30 , LOW ( 0x43A4CCCD )
000202 ecfc     +LDI R31 , HIGH ( 0x43A4CCCD )
000203 ea64     +LDI R22 , BYTE3 ( 0x43A4CCCD )
000204 e473     +LDI R23 , BYTE4 ( 0x43A4CCCD )
                 	__GETD1N 0x43A4CCCD
000205 940e 059e 	CALL __PUTPARD1
000207 de71      	RCALL _tono
                 ; 0000 0053          delay_ms(30);
000208 e1ee      	LDI  R30,LOW(30)
000209 e0f0      	LDI  R31,HIGH(30)
00020a 93fa      	ST   -Y,R31
00020b 93ea      	ST   -Y,R30
00020c 940e 040d 	CALL _delay_ms
                 ; 0000 0054          while (PIND.2==0);
                 _0x1E:
00020e 9b4a      	SBIS 0x9,2
00020f cffe      	RJMP _0x1E
                 ; 0000 0055          Milis[fin]=mseg-aux;
000210 91e0 0629 	LDS  R30,_fin
000212 e9a4      	LDI  R26,LOW(_Milis)
000213 e0b4      	LDI  R27,HIGH(_Milis)
000214 e0f0      	LDI  R31,0
000215 940e 0576 	CALL __LSLW2
000217 0fea      	ADD  R30,R26
000218 1ffb      	ADC  R31,R27
000219 010f      	MOVW R0,R30
00021a 91a0 0624 	LDS  R26,_aux
00021c 91b0 0625 	LDS  R27,_aux+1
00021e 9180 0626 	LDS  R24,_aux+2
000220 9190 0627 	LDS  R25,_aux+3
000222 91e0 0490 	LDS  R30,_mseg
000224 91f0 0491 	LDS  R31,_mseg+1
000226 9160 0492 	LDS  R22,_mseg+2
000228 9170 0493 	LDS  R23,_mseg+3
00022a 940e 0569 	CALL __SUBD12
00022c 01d0      	MOVW R26,R0
00022d 940e 0594 	CALL __PUTDP1
                 ; 0000 0056          Cancion[fin++]=329.6;
00022f 91e0 0629 	LDS  R30,_fin
000231 5fef      	SUBI R30,-LOW(1)
000232 93e0 0629 	STS  _fin,R30
000234 50e1      	SUBI R30,LOW(1)
000235 e0a0      	LDI  R26,LOW(_Cancion)
000236 e0b3      	LDI  R27,HIGH(_Cancion)
000237 e0f0      	LDI  R31,0
000238 940e 0576 	CALL __LSLW2
00023a 0fae      	ADD  R26,R30
00023b 1fbf      	ADC  R27,R31
                +
00023c eced     +LDI R30 , LOW ( 0x43A4CCCD )
00023d ecfc     +LDI R31 , HIGH ( 0x43A4CCCD )
00023e ea64     +LDI R22 , BYTE3 ( 0x43A4CCCD )
00023f e473     +LDI R23 , BYTE4 ( 0x43A4CCCD )
                 	__GETD1N 0x43A4CCCD
000240 940e 0594 	CALL __PUTDP1
                 ; 0000 0057        noTono();
000242 de17      	RCALL _noTono
                 ; 0000 0058        delay_ms(30);
000243 e1ee      	LDI  R30,LOW(30)
000244 e0f0      	LDI  R31,HIGH(30)
000245 93fa      	ST   -Y,R31
000246 93ea      	ST   -Y,R30
000247 940e 040d 	CALL _delay_ms
                 ; 0000 0059     }
                 ; 0000 005A     if (PIND.3==0){
                 _0x1D:
000249 994b      	SBIC 0x9,3
00024a c058      	RJMP _0x21
                 ; 0000 005B         aux=mseg;
00024b 91e0 0490 	LDS  R30,_mseg
00024d 91f0 0491 	LDS  R31,_mseg+1
00024f 9160 0492 	LDS  R22,_mseg+2
000251 9170 0493 	LDS  R23,_mseg+3
000253 93e0 0624 	STS  _aux,R30
000255 93f0 0625 	STS  _aux+1,R31
000257 9360 0626 	STS  _aux+2,R22
000259 9370 0627 	STS  _aux+3,R23
                 ; 0000 005C          tono(349.2);
                +
00025b e9ea     +LDI R30 , LOW ( 0x43AE999A )
00025c e9f9     +LDI R31 , HIGH ( 0x43AE999A )
00025d ea6e     +LDI R22 , BYTE3 ( 0x43AE999A )
00025e e473     +LDI R23 , BYTE4 ( 0x43AE999A )
                 	__GETD1N 0x43AE999A
00025f 940e 059e 	CALL __PUTPARD1
000261 de17      	RCALL _tono
                 ; 0000 005D          delay_ms(30);
000262 e1ee      	LDI  R30,LOW(30)
000263 e0f0      	LDI  R31,HIGH(30)
000264 93fa      	ST   -Y,R31
000265 93ea      	ST   -Y,R30
000266 940e 040d 	CALL _delay_ms
                 ; 0000 005E          while (PIND.3==0);
                 _0x22:
000268 9b4b      	SBIS 0x9,3
000269 cffe      	RJMP _0x22
                 ; 0000 005F          Milis[fin]=mseg-aux;
00026a 91e0 0629 	LDS  R30,_fin
00026c e9a4      	LDI  R26,LOW(_Milis)
00026d e0b4      	LDI  R27,HIGH(_Milis)
00026e e0f0      	LDI  R31,0
00026f 940e 0576 	CALL __LSLW2
000271 0fea      	ADD  R30,R26
000272 1ffb      	ADC  R31,R27
000273 010f      	MOVW R0,R30
000274 91a0 0624 	LDS  R26,_aux
000276 91b0 0625 	LDS  R27,_aux+1
000278 9180 0626 	LDS  R24,_aux+2
00027a 9190 0627 	LDS  R25,_aux+3
00027c 91e0 0490 	LDS  R30,_mseg
00027e 91f0 0491 	LDS  R31,_mseg+1
000280 9160 0492 	LDS  R22,_mseg+2
000282 9170 0493 	LDS  R23,_mseg+3
000284 940e 0569 	CALL __SUBD12
000286 01d0      	MOVW R26,R0
000287 940e 0594 	CALL __PUTDP1
                 ; 0000 0060          Cancion[fin++]=349.2;
000289 91e0 0629 	LDS  R30,_fin
00028b 5fef      	SUBI R30,-LOW(1)
00028c 93e0 0629 	STS  _fin,R30
00028e 50e1      	SUBI R30,LOW(1)
00028f e0a0      	LDI  R26,LOW(_Cancion)
000290 e0b3      	LDI  R27,HIGH(_Cancion)
000291 e0f0      	LDI  R31,0
000292 940e 0576 	CALL __LSLW2
000294 0fae      	ADD  R26,R30
000295 1fbf      	ADC  R27,R31
                +
000296 e9ea     +LDI R30 , LOW ( 0x43AE999A )
000297 e9f9     +LDI R31 , HIGH ( 0x43AE999A )
000298 ea6e     +LDI R22 , BYTE3 ( 0x43AE999A )
000299 e473     +LDI R23 , BYTE4 ( 0x43AE999A )
                 	__GETD1N 0x43AE999A
00029a 940e 0594 	CALL __PUTDP1
                 ; 0000 0061        noTono();
00029c ddbd      	RCALL _noTono
                 ; 0000 0062        delay_ms(30);
00029d e1ee      	LDI  R30,LOW(30)
00029e e0f0      	LDI  R31,HIGH(30)
00029f 93fa      	ST   -Y,R31
0002a0 93ea      	ST   -Y,R30
0002a1 940e 040d 	CALL _delay_ms
                 ; 0000 0063     }
                 ; 0000 0064     if (PIND.4==0){
                 _0x21:
0002a3 994c      	SBIC 0x9,4
0002a4 c058      	RJMP _0x25
                 ; 0000 0065         aux=mseg;
0002a5 91e0 0490 	LDS  R30,_mseg
0002a7 91f0 0491 	LDS  R31,_mseg+1
0002a9 9160 0492 	LDS  R22,_mseg+2
0002ab 9170 0493 	LDS  R23,_mseg+3
0002ad 93e0 0624 	STS  _aux,R30
0002af 93f0 0625 	STS  _aux+1,R31
0002b1 9360 0626 	STS  _aux+2,R22
0002b3 9370 0627 	STS  _aux+3,R23
                 ; 0000 0066          tono(391.6);
                +
0002b5 eced     +LDI R30 , LOW ( 0x43C3CCCD )
0002b6 ecfc     +LDI R31 , HIGH ( 0x43C3CCCD )
0002b7 ec63     +LDI R22 , BYTE3 ( 0x43C3CCCD )
0002b8 e473     +LDI R23 , BYTE4 ( 0x43C3CCCD )
                 	__GETD1N 0x43C3CCCD
0002b9 940e 059e 	CALL __PUTPARD1
0002bb ddbd      	RCALL _tono
                 ; 0000 0067          delay_ms(30);
0002bc e1ee      	LDI  R30,LOW(30)
0002bd e0f0      	LDI  R31,HIGH(30)
0002be 93fa      	ST   -Y,R31
0002bf 93ea      	ST   -Y,R30
0002c0 940e 040d 	CALL _delay_ms
                 ; 0000 0068          while (PIND.4==0);
                 _0x26:
0002c2 9b4c      	SBIS 0x9,4
0002c3 cffe      	RJMP _0x26
                 ; 0000 0069          Milis[fin]=mseg-aux;
0002c4 91e0 0629 	LDS  R30,_fin
0002c6 e9a4      	LDI  R26,LOW(_Milis)
0002c7 e0b4      	LDI  R27,HIGH(_Milis)
0002c8 e0f0      	LDI  R31,0
0002c9 940e 0576 	CALL __LSLW2
0002cb 0fea      	ADD  R30,R26
0002cc 1ffb      	ADC  R31,R27
0002cd 010f      	MOVW R0,R30
0002ce 91a0 0624 	LDS  R26,_aux
0002d0 91b0 0625 	LDS  R27,_aux+1
0002d2 9180 0626 	LDS  R24,_aux+2
0002d4 9190 0627 	LDS  R25,_aux+3
0002d6 91e0 0490 	LDS  R30,_mseg
0002d8 91f0 0491 	LDS  R31,_mseg+1
0002da 9160 0492 	LDS  R22,_mseg+2
0002dc 9170 0493 	LDS  R23,_mseg+3
0002de 940e 0569 	CALL __SUBD12
0002e0 01d0      	MOVW R26,R0
0002e1 940e 0594 	CALL __PUTDP1
                 ; 0000 006A          Cancion[fin++]=391.6;
0002e3 91e0 0629 	LDS  R30,_fin
0002e5 5fef      	SUBI R30,-LOW(1)
0002e6 93e0 0629 	STS  _fin,R30
0002e8 50e1      	SUBI R30,LOW(1)
0002e9 e0a0      	LDI  R26,LOW(_Cancion)
0002ea e0b3      	LDI  R27,HIGH(_Cancion)
0002eb e0f0      	LDI  R31,0
0002ec 940e 0576 	CALL __LSLW2
0002ee 0fae      	ADD  R26,R30
0002ef 1fbf      	ADC  R27,R31
                +
0002f0 eced     +LDI R30 , LOW ( 0x43C3CCCD )
0002f1 ecfc     +LDI R31 , HIGH ( 0x43C3CCCD )
0002f2 ec63     +LDI R22 , BYTE3 ( 0x43C3CCCD )
0002f3 e473     +LDI R23 , BYTE4 ( 0x43C3CCCD )
                 	__GETD1N 0x43C3CCCD
0002f4 940e 0594 	CALL __PUTDP1
                 ; 0000 006B        noTono();
0002f6 dd63      	RCALL _noTono
                 ; 0000 006C        delay_ms(30);
0002f7 e1ee      	LDI  R30,LOW(30)
0002f8 e0f0      	LDI  R31,HIGH(30)
0002f9 93fa      	ST   -Y,R31
0002fa 93ea      	ST   -Y,R30
0002fb 940e 040d 	CALL _delay_ms
                 ; 0000 006D     }
                 ; 0000 006E     if (PIND.5==0){
                 _0x25:
0002fd 994d      	SBIC 0x9,5
0002fe c058      	RJMP _0x29
                 ; 0000 006F         aux=mseg;
0002ff 91e0 0490 	LDS  R30,_mseg
000301 91f0 0491 	LDS  R31,_mseg+1
000303 9160 0492 	LDS  R22,_mseg+2
000305 9170 0493 	LDS  R23,_mseg+3
000307 93e0 0624 	STS  _aux,R30
000309 93f0 0625 	STS  _aux+1,R31
00030b 9360 0626 	STS  _aux+2,R22
00030d 9370 0627 	STS  _aux+3,R23
                 ; 0000 0070          tono(440.6);
                +
00030f eced     +LDI R30 , LOW ( 0x43DC4CCD )
000310 e4fc     +LDI R31 , HIGH ( 0x43DC4CCD )
000311 ed6c     +LDI R22 , BYTE3 ( 0x43DC4CCD )
000312 e473     +LDI R23 , BYTE4 ( 0x43DC4CCD )
                 	__GETD1N 0x43DC4CCD
000313 940e 059e 	CALL __PUTPARD1
000315 dd63      	RCALL _tono
                 ; 0000 0071          delay_ms(30);
000316 e1ee      	LDI  R30,LOW(30)
000317 e0f0      	LDI  R31,HIGH(30)
000318 93fa      	ST   -Y,R31
000319 93ea      	ST   -Y,R30
00031a 940e 040d 	CALL _delay_ms
                 ; 0000 0072          while (PIND.5==0);
                 _0x2A:
00031c 9b4d      	SBIS 0x9,5
00031d cffe      	RJMP _0x2A
                 ; 0000 0073          Milis[fin]=mseg-aux;
00031e 91e0 0629 	LDS  R30,_fin
000320 e9a4      	LDI  R26,LOW(_Milis)
000321 e0b4      	LDI  R27,HIGH(_Milis)
000322 e0f0      	LDI  R31,0
000323 940e 0576 	CALL __LSLW2
000325 0fea      	ADD  R30,R26
000326 1ffb      	ADC  R31,R27
000327 010f      	MOVW R0,R30
000328 91a0 0624 	LDS  R26,_aux
00032a 91b0 0625 	LDS  R27,_aux+1
00032c 9180 0626 	LDS  R24,_aux+2
00032e 9190 0627 	LDS  R25,_aux+3
000330 91e0 0490 	LDS  R30,_mseg
000332 91f0 0491 	LDS  R31,_mseg+1
000334 9160 0492 	LDS  R22,_mseg+2
000336 9170 0493 	LDS  R23,_mseg+3
000338 940e 0569 	CALL __SUBD12
00033a 01d0      	MOVW R26,R0
00033b 940e 0594 	CALL __PUTDP1
                 ; 0000 0074          Cancion[fin++]=440.6;
00033d 91e0 0629 	LDS  R30,_fin
00033f 5fef      	SUBI R30,-LOW(1)
000340 93e0 0629 	STS  _fin,R30
000342 50e1      	SUBI R30,LOW(1)
000343 e0a0      	LDI  R26,LOW(_Cancion)
000344 e0b3      	LDI  R27,HIGH(_Cancion)
000345 e0f0      	LDI  R31,0
000346 940e 0576 	CALL __LSLW2
000348 0fae      	ADD  R26,R30
000349 1fbf      	ADC  R27,R31
                +
00034a eced     +LDI R30 , LOW ( 0x43DC4CCD )
00034b e4fc     +LDI R31 , HIGH ( 0x43DC4CCD )
00034c ed6c     +LDI R22 , BYTE3 ( 0x43DC4CCD )
00034d e473     +LDI R23 , BYTE4 ( 0x43DC4CCD )
                 	__GETD1N 0x43DC4CCD
00034e 940e 0594 	CALL __PUTDP1
                 ; 0000 0075        noTono();
000350 dd09      	RCALL _noTono
                 ; 0000 0076        delay_ms(30);
000351 e1ee      	LDI  R30,LOW(30)
000352 e0f0      	LDI  R31,HIGH(30)
000353 93fa      	ST   -Y,R31
000354 93ea      	ST   -Y,R30
000355 940e 040d 	CALL _delay_ms
                 ; 0000 0077     }
                 ; 0000 0078     if (PIND.6==0){
                 _0x29:
000357 994e      	SBIC 0x9,6
000358 c058      	RJMP _0x2D
                 ; 0000 0079         aux=mseg;
000359 91e0 0490 	LDS  R30,_mseg
00035b 91f0 0491 	LDS  R31,_mseg+1
00035d 9160 0492 	LDS  R22,_mseg+2
00035f 9170 0493 	LDS  R23,_mseg+3
000361 93e0 0624 	STS  _aux,R30
000363 93f0 0625 	STS  _aux+1,R31
000365 9360 0626 	STS  _aux+2,R22
000367 9370 0627 	STS  _aux+3,R23
                 ; 0000 007A          tono(493.8);
                +
000369 e6e6     +LDI R30 , LOW ( 0x43F6E666 )
00036a eef6     +LDI R31 , HIGH ( 0x43F6E666 )
00036b ef66     +LDI R22 , BYTE3 ( 0x43F6E666 )
00036c e473     +LDI R23 , BYTE4 ( 0x43F6E666 )
                 	__GETD1N 0x43F6E666
00036d 940e 059e 	CALL __PUTPARD1
00036f dd09      	RCALL _tono
                 ; 0000 007B          delay_ms(30);
000370 e1ee      	LDI  R30,LOW(30)
000371 e0f0      	LDI  R31,HIGH(30)
000372 93fa      	ST   -Y,R31
000373 93ea      	ST   -Y,R30
000374 940e 040d 	CALL _delay_ms
                 ; 0000 007C          while (PIND.6==0);
                 _0x2E:
000376 9b4e      	SBIS 0x9,6
000377 cffe      	RJMP _0x2E
                 ; 0000 007D          Milis[fin]=mseg-aux;
000378 91e0 0629 	LDS  R30,_fin
00037a e9a4      	LDI  R26,LOW(_Milis)
00037b e0b4      	LDI  R27,HIGH(_Milis)
00037c e0f0      	LDI  R31,0
00037d 940e 0576 	CALL __LSLW2
00037f 0fea      	ADD  R30,R26
000380 1ffb      	ADC  R31,R27
000381 010f      	MOVW R0,R30
000382 91a0 0624 	LDS  R26,_aux
000384 91b0 0625 	LDS  R27,_aux+1
000386 9180 0626 	LDS  R24,_aux+2
000388 9190 0627 	LDS  R25,_aux+3
00038a 91e0 0490 	LDS  R30,_mseg
00038c 91f0 0491 	LDS  R31,_mseg+1
00038e 9160 0492 	LDS  R22,_mseg+2
000390 9170 0493 	LDS  R23,_mseg+3
000392 940e 0569 	CALL __SUBD12
000394 01d0      	MOVW R26,R0
000395 940e 0594 	CALL __PUTDP1
                 ; 0000 007E          Cancion[fin++]=493.6;
000397 91e0 0629 	LDS  R30,_fin
000399 5fef      	SUBI R30,-LOW(1)
00039a 93e0 0629 	STS  _fin,R30
00039c 50e1      	SUBI R30,LOW(1)
00039d e0a0      	LDI  R26,LOW(_Cancion)
00039e e0b3      	LDI  R27,HIGH(_Cancion)
00039f e0f0      	LDI  R31,0
0003a0 940e 0576 	CALL __LSLW2
0003a2 0fae      	ADD  R26,R30
0003a3 1fbf      	ADC  R27,R31
                +
0003a4 eced     +LDI R30 , LOW ( 0x43F6CCCD )
0003a5 ecfc     +LDI R31 , HIGH ( 0x43F6CCCD )
0003a6 ef66     +LDI R22 , BYTE3 ( 0x43F6CCCD )
0003a7 e473     +LDI R23 , BYTE4 ( 0x43F6CCCD )
                 	__GETD1N 0x43F6CCCD
0003a8 940e 0594 	CALL __PUTDP1
                 ; 0000 007F        noTono();
0003aa dcaf      	RCALL _noTono
                 ; 0000 0080        delay_ms(30);
0003ab e1ee      	LDI  R30,LOW(30)
0003ac e0f0      	LDI  R31,HIGH(30)
0003ad 93fa      	ST   -Y,R31
0003ae 93ea      	ST   -Y,R30
0003af 940e 040d 	CALL _delay_ms
                 ; 0000 0081     }
                 ; 0000 0082     if (PIND.7==0){
                 _0x2D:
0003b1 994f      	SBIC 0x9,7
0003b2 c058      	RJMP _0x31
                 ; 0000 0083         aux=mseg;
0003b3 91e0 0490 	LDS  R30,_mseg
0003b5 91f0 0491 	LDS  R31,_mseg+1
0003b7 9160 0492 	LDS  R22,_mseg+2
0003b9 9170 0493 	LDS  R23,_mseg+3
0003bb 93e0 0624 	STS  _aux,R30
0003bd 93f0 0625 	STS  _aux+1,R31
0003bf 9360 0626 	STS  _aux+2,R22
0003c1 9370 0627 	STS  _aux+3,R23
                 ; 0000 0084          tono(540.6);
                +
0003c3 e6e6     +LDI R30 , LOW ( 0x44072666 )
0003c4 e2f6     +LDI R31 , HIGH ( 0x44072666 )
0003c5 e067     +LDI R22 , BYTE3 ( 0x44072666 )
0003c6 e474     +LDI R23 , BYTE4 ( 0x44072666 )
                 	__GETD1N 0x44072666
0003c7 940e 059e 	CALL __PUTPARD1
0003c9 dcaf      	RCALL _tono
                 ; 0000 0085          delay_ms(30);
0003ca e1ee      	LDI  R30,LOW(30)
0003cb e0f0      	LDI  R31,HIGH(30)
0003cc 93fa      	ST   -Y,R31
0003cd 93ea      	ST   -Y,R30
0003ce 940e 040d 	CALL _delay_ms
                 ; 0000 0086          while (PIND.7==0);
                 _0x32:
0003d0 9b4f      	SBIS 0x9,7
0003d1 cffe      	RJMP _0x32
                 ; 0000 0087          Milis[fin]=mseg-aux;
0003d2 91e0 0629 	LDS  R30,_fin
0003d4 e9a4      	LDI  R26,LOW(_Milis)
0003d5 e0b4      	LDI  R27,HIGH(_Milis)
0003d6 e0f0      	LDI  R31,0
0003d7 940e 0576 	CALL __LSLW2
0003d9 0fea      	ADD  R30,R26
0003da 1ffb      	ADC  R31,R27
0003db 010f      	MOVW R0,R30
0003dc 91a0 0624 	LDS  R26,_aux
0003de 91b0 0625 	LDS  R27,_aux+1
0003e0 9180 0626 	LDS  R24,_aux+2
0003e2 9190 0627 	LDS  R25,_aux+3
0003e4 91e0 0490 	LDS  R30,_mseg
0003e6 91f0 0491 	LDS  R31,_mseg+1
0003e8 9160 0492 	LDS  R22,_mseg+2
0003ea 9170 0493 	LDS  R23,_mseg+3
0003ec 940e 0569 	CALL __SUBD12
0003ee 01d0      	MOVW R26,R0
0003ef 940e 0594 	CALL __PUTDP1
                 ; 0000 0088          Cancion[fin++]=540.6;
0003f1 91e0 0629 	LDS  R30,_fin
0003f3 5fef      	SUBI R30,-LOW(1)
0003f4 93e0 0629 	STS  _fin,R30
0003f6 50e1      	SUBI R30,LOW(1)
0003f7 e0a0      	LDI  R26,LOW(_Cancion)
0003f8 e0b3      	LDI  R27,HIGH(_Cancion)
0003f9 e0f0      	LDI  R31,0
0003fa 940e 0576 	CALL __LSLW2
0003fc 0fae      	ADD  R26,R30
0003fd 1fbf      	ADC  R27,R31
                +
0003fe e6e6     +LDI R30 , LOW ( 0x44072666 )
0003ff e2f6     +LDI R31 , HIGH ( 0x44072666 )
000400 e067     +LDI R22 , BYTE3 ( 0x44072666 )
000401 e474     +LDI R23 , BYTE4 ( 0x44072666 )
                 	__GETD1N 0x44072666
000402 940e 0594 	CALL __PUTDP1
                 ; 0000 0089        noTono();
000404 dc55      	RCALL _noTono
                 ; 0000 008A        delay_ms(30);
000405 e1ee      	LDI  R30,LOW(30)
000406 e0f0      	LDI  R31,HIGH(30)
000407 93fa      	ST   -Y,R31
000408 93ea      	ST   -Y,R30
000409 940e 040d 	CALL _delay_ms
                 ; 0000 008B     }
                 ; 0000 008C     }
                 _0x31:
00040b ccc7      	RJMP _0xA
                 ; 0000 008D   }
                 _0x35:
00040c cfff      	RJMP _0x35
                 
                 	.DSEG
                 _Cancion:
000300           	.BYTE 0x190
                 _mseg:
000490           	.BYTE 0x4
                 _Milis:
000494           	.BYTE 0x190
                 _aux:
000624           	.BYTE 0x4
                 _i:
000628           	.BYTE 0x1
                 _fin:
000629           	.BYTE 0x1
                 _j:
00062a           	.BYTE 0x1
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
00040d 91e9      	ld   r30,y+
00040e 91f9      	ld   r31,y+
00040f 9630      	adiw r30,0
000410 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000411 ef8a     +LDI R24 , LOW ( 0xFA )
000412 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000413 9701     +SBIW R24 , 1
000414 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000415 95a8      	wdr
000416 9731      	sbiw r30,1
000417 f7c9      	brne __delay_ms0
                 __delay_ms1:
000418 9508      	ret
                 
                 __ROUND_REPACK:
000419 2355      	TST  R21
00041a f442      	BRPL __REPACK
00041b 3850      	CPI  R21,0x80
00041c f411      	BRNE __ROUND_REPACK0
00041d ffe0      	SBRS R30,0
00041e c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00041f 9631      	ADIW R30,1
000420 1f69      	ADC  R22,R25
000421 1f79      	ADC  R23,R25
000422 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000423 e850      	LDI  R21,0x80
000424 2757      	EOR  R21,R23
000425 f411      	BRNE __REPACK0
000426 935f      	PUSH R21
000427 c0ca      	RJMP __ZERORES
                 __REPACK0:
000428 3f5f      	CPI  R21,0xFF
000429 f031      	BREQ __REPACK1
00042a 0f66      	LSL  R22
00042b 0c00      	LSL  R0
00042c 9557      	ROR  R21
00042d 9567      	ROR  R22
00042e 2f75      	MOV  R23,R21
00042f 9508      	RET
                 __REPACK1:
000430 935f      	PUSH R21
000431 2000      	TST  R0
000432 f00a      	BRMI __REPACK2
000433 c0ca      	RJMP __MAXRES
                 __REPACK2:
000434 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
000435 e850      	LDI  R21,0x80
000436 2e19      	MOV  R1,R25
000437 2215      	AND  R1,R21
000438 0f88      	LSL  R24
000439 1f99      	ROL  R25
00043a 2795      	EOR  R25,R21
00043b 0f55      	LSL  R21
00043c 9587      	ROR  R24
                 
                 __UNPACK1:
00043d e850      	LDI  R21,0x80
00043e 2e07      	MOV  R0,R23
00043f 2205      	AND  R0,R21
000440 0f66      	LSL  R22
000441 1f77      	ROL  R23
000442 2775      	EOR  R23,R21
000443 0f55      	LSL  R21
000444 9567      	ROR  R22
000445 9508      	RET
                 
                 __CFD1U:
000446 9468      	SET
000447 c001      	RJMP __CFD1U0
                 __CFD1:
000448 94e8      	CLT
                 __CFD1U0:
000449 935f      	PUSH R21
00044a dff2      	RCALL __UNPACK1
00044b 3870      	CPI  R23,0x80
00044c f018      	BRLO __CFD10
00044d 3f7f      	CPI  R23,0xFF
00044e f408      	BRCC __CFD10
00044f c0a2      	RJMP __ZERORES
                 __CFD10:
000450 e156      	LDI  R21,22
000451 1b57      	SUB  R21,R23
000452 f4aa      	BRPL __CFD11
000453 9551      	NEG  R21
000454 3058      	CPI  R21,8
000455 f40e      	BRTC __CFD19
000456 3059      	CPI  R21,9
                 __CFD19:
000457 f030      	BRLO __CFD17
000458 efef      	SER  R30
000459 efff      	SER  R31
00045a ef6f      	SER  R22
00045b e77f      	LDI  R23,0x7F
00045c f977      	BLD  R23,7
00045d c01a      	RJMP __CFD15
                 __CFD17:
00045e 2777      	CLR  R23
00045f 2355      	TST  R21
000460 f0b9      	BREQ __CFD15
                 __CFD18:
000461 0fee      	LSL  R30
000462 1fff      	ROL  R31
000463 1f66      	ROL  R22
000464 1f77      	ROL  R23
000465 955a      	DEC  R21
000466 f7d1      	BRNE __CFD18
000467 c010      	RJMP __CFD15
                 __CFD11:
000468 2777      	CLR  R23
                 __CFD12:
000469 3058      	CPI  R21,8
00046a f028      	BRLO __CFD13
00046b 2fef      	MOV  R30,R31
00046c 2ff6      	MOV  R31,R22
00046d 2f67      	MOV  R22,R23
00046e 5058      	SUBI R21,8
00046f cff9      	RJMP __CFD12
                 __CFD13:
000470 2355      	TST  R21
000471 f031      	BREQ __CFD15
                 __CFD14:
000472 9576      	LSR  R23
000473 9567      	ROR  R22
000474 95f7      	ROR  R31
000475 95e7      	ROR  R30
000476 955a      	DEC  R21
000477 f7d1      	BRNE __CFD14
                 __CFD15:
000478 2000      	TST  R0
000479 f40a      	BRPL __CFD16
00047a d0f3      	RCALL __ANEGD1
                 __CFD16:
00047b 915f      	POP  R21
00047c 9508      	RET
                 
                 __CDF1U:
00047d 9468      	SET
00047e c001      	RJMP __CDF1U0
                 __CDF1:
00047f 94e8      	CLT
                 __CDF1U0:
000480 9730      	SBIW R30,0
000481 4060      	SBCI R22,0
000482 4070      	SBCI R23,0
000483 f0b1      	BREQ __CDF10
000484 2400      	CLR  R0
000485 f026      	BRTS __CDF11
000486 2377      	TST  R23
000487 f412      	BRPL __CDF11
000488 9400      	COM  R0
000489 d0e4      	RCALL __ANEGD1
                 __CDF11:
00048a 2e17      	MOV  R1,R23
00048b e17e      	LDI  R23,30
00048c 2011      	TST  R1
                 __CDF12:
00048d f032      	BRMI __CDF13
00048e 957a      	DEC  R23
00048f 0fee      	LSL  R30
000490 1fff      	ROL  R31
000491 1f66      	ROL  R22
000492 1c11      	ROL  R1
000493 cff9      	RJMP __CDF12
                 __CDF13:
000494 2fef      	MOV  R30,R31
000495 2ff6      	MOV  R31,R22
000496 2d61      	MOV  R22,R1
000497 935f      	PUSH R21
000498 df8a      	RCALL __REPACK
000499 915f      	POP  R21
                 __CDF10:
00049a 9508      	RET
                 
                 __SWAPACC:
00049b 934f      	PUSH R20
00049c 01af      	MOVW R20,R30
00049d 01fd      	MOVW R30,R26
00049e 01da      	MOVW R26,R20
00049f 01ab      	MOVW R20,R22
0004a0 01bc      	MOVW R22,R24
0004a1 01ca      	MOVW R24,R20
0004a2 2d40      	MOV  R20,R0
0004a3 2c01      	MOV  R0,R1
0004a4 2e14      	MOV  R1,R20
0004a5 914f      	POP  R20
0004a6 9508      	RET
                 
                 __UADD12:
0004a7 0fea      	ADD  R30,R26
0004a8 1ffb      	ADC  R31,R27
0004a9 1f68      	ADC  R22,R24
0004aa 9508      	RET
                 
                 __NEGMAN1:
0004ab 95e0      	COM  R30
0004ac 95f0      	COM  R31
0004ad 9560      	COM  R22
0004ae 5fef      	SUBI R30,-1
0004af 4fff      	SBCI R31,-1
0004b0 4f6f      	SBCI R22,-1
0004b1 9508      	RET
                 
                 __SUBF12:
0004b2 935f      	PUSH R21
0004b3 df81      	RCALL __UNPACK
0004b4 3890      	CPI  R25,0x80
0004b5 f149      	BREQ __ADDF129
0004b6 e850      	LDI  R21,0x80
0004b7 2615      	EOR  R1,R21
                 
                 __ADDF120:
0004b8 3870      	CPI  R23,0x80
0004b9 f121      	BREQ __ADDF128
                 __ADDF121:
0004ba 2f57      	MOV  R21,R23
0004bb 1b59      	SUB  R21,R25
0004bc f12b      	BRVS __ADDF1211
0004bd f412      	BRPL __ADDF122
0004be dfdc      	RCALL __SWAPACC
0004bf cffa      	RJMP __ADDF121
                 __ADDF122:
0004c0 3158      	CPI  R21,24
0004c1 f018      	BRLO __ADDF123
0004c2 27aa      	CLR  R26
0004c3 27bb      	CLR  R27
0004c4 2788      	CLR  R24
                 __ADDF123:
0004c5 3058      	CPI  R21,8
0004c6 f028      	BRLO __ADDF124
0004c7 2fab      	MOV  R26,R27
0004c8 2fb8      	MOV  R27,R24
0004c9 2788      	CLR  R24
0004ca 5058      	SUBI R21,8
0004cb cff9      	RJMP __ADDF123
                 __ADDF124:
0004cc 2355      	TST  R21
0004cd f029      	BREQ __ADDF126
                 __ADDF125:
0004ce 9586      	LSR  R24
0004cf 95b7      	ROR  R27
0004d0 95a7      	ROR  R26
0004d1 955a      	DEC  R21
0004d2 f7d9      	BRNE __ADDF125
                 __ADDF126:
0004d3 2d50      	MOV  R21,R0
0004d4 2551      	EOR  R21,R1
0004d5 f072      	BRMI __ADDF127
0004d6 dfd0      	RCALL __UADD12
0004d7 f438      	BRCC __ADDF129
0004d8 9567      	ROR  R22
0004d9 95f7      	ROR  R31
0004da 95e7      	ROR  R30
0004db 9573      	INC  R23
0004dc f413      	BRVC __ADDF129
0004dd c020      	RJMP __MAXRES
                 __ADDF128:
0004de dfbc      	RCALL __SWAPACC
                 __ADDF129:
0004df df43      	RCALL __REPACK
0004e0 915f      	POP  R21
0004e1 9508      	RET
                 __ADDF1211:
0004e2 f7d8      	BRCC __ADDF128
0004e3 cffb      	RJMP __ADDF129
                 __ADDF127:
0004e4 1bea      	SUB  R30,R26
0004e5 0bfb      	SBC  R31,R27
0004e6 0b68      	SBC  R22,R24
0004e7 f051      	BREQ __ZERORES
0004e8 f410      	BRCC __ADDF1210
0004e9 9400      	COM  R0
0004ea dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0004eb 2366      	TST  R22
0004ec f392      	BRMI __ADDF129
0004ed 0fee      	LSL  R30
0004ee 1fff      	ROL  R31
0004ef 1f66      	ROL  R22
0004f0 957a      	DEC  R23
0004f1 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0004f2 27ee      	CLR  R30
0004f3 27ff      	CLR  R31
0004f4 2766      	CLR  R22
0004f5 2777      	CLR  R23
0004f6 915f      	POP  R21
0004f7 9508      	RET
                 
                 __MINRES:
0004f8 efef      	SER  R30
0004f9 efff      	SER  R31
0004fa e76f      	LDI  R22,0x7F
0004fb ef7f      	SER  R23
0004fc 915f      	POP  R21
0004fd 9508      	RET
                 
                 __MAXRES:
0004fe efef      	SER  R30
0004ff efff      	SER  R31
000500 e76f      	LDI  R22,0x7F
000501 e77f      	LDI  R23,0x7F
000502 915f      	POP  R21
000503 9508      	RET
                 
                 __DIVF21:
000504 935f      	PUSH R21
000505 df2f      	RCALL __UNPACK
000506 3870      	CPI  R23,0x80
000507 f421      	BRNE __DIVF210
000508 2011      	TST  R1
                 __DIVF211:
000509 f40a      	BRPL __DIVF219
00050a cfed      	RJMP __MINRES
                 __DIVF219:
00050b cff2      	RJMP __MAXRES
                 __DIVF210:
00050c 3890      	CPI  R25,0x80
00050d f409      	BRNE __DIVF218
                 __DIVF217:
00050e cfe3      	RJMP __ZERORES
                 __DIVF218:
00050f 2401      	EOR  R0,R1
000510 9408      	SEC
000511 0b97      	SBC  R25,R23
000512 f41b      	BRVC __DIVF216
000513 f3d4      	BRLT __DIVF217
000514 2000      	TST  R0
000515 cff3      	RJMP __DIVF211
                 __DIVF216:
000516 2f79      	MOV  R23,R25
000517 931f      	PUSH R17
000518 932f      	PUSH R18
000519 933f      	PUSH R19
00051a 934f      	PUSH R20
00051b 2411      	CLR  R1
00051c 2711      	CLR  R17
00051d 2722      	CLR  R18
00051e 2733      	CLR  R19
00051f 2744      	CLR  R20
000520 2755      	CLR  R21
000521 e290      	LDI  R25,32
                 __DIVF212:
000522 17ae      	CP   R26,R30
000523 07bf      	CPC  R27,R31
000524 0786      	CPC  R24,R22
000525 0741      	CPC  R20,R17
000526 f030      	BRLO __DIVF213
000527 1bae      	SUB  R26,R30
000528 0bbf      	SBC  R27,R31
000529 0b86      	SBC  R24,R22
00052a 0b41      	SBC  R20,R17
00052b 9408      	SEC
00052c c001      	RJMP __DIVF214
                 __DIVF213:
00052d 9488      	CLC
                 __DIVF214:
00052e 1f55      	ROL  R21
00052f 1f22      	ROL  R18
000530 1f33      	ROL  R19
000531 1c11      	ROL  R1
000532 1faa      	ROL  R26
000533 1fbb      	ROL  R27
000534 1f88      	ROL  R24
000535 1f44      	ROL  R20
000536 959a      	DEC  R25
000537 f751      	BRNE __DIVF212
000538 01f9      	MOVW R30,R18
000539 2d61      	MOV  R22,R1
00053a 914f      	POP  R20
00053b 913f      	POP  R19
00053c 912f      	POP  R18
00053d 911f      	POP  R17
00053e 2366      	TST  R22
00053f f032      	BRMI __DIVF215
000540 0f55      	LSL  R21
000541 1fee      	ROL  R30
000542 1fff      	ROL  R31
000543 1f66      	ROL  R22
000544 957a      	DEC  R23
000545 f243      	BRVS __DIVF217
                 __DIVF215:
000546 ded2      	RCALL __ROUND_REPACK
000547 915f      	POP  R21
000548 9508      	RET
                 
                 __CMPF12:
000549 2399      	TST  R25
00054a f09a      	BRMI __CMPF120
00054b 2377      	TST  R23
00054c f042      	BRMI __CMPF121
00054d 1797      	CP   R25,R23
00054e f048      	BRLO __CMPF122
00054f f429      	BRNE __CMPF121
000550 17ae      	CP   R26,R30
000551 07bf      	CPC  R27,R31
000552 0786      	CPC  R24,R22
000553 f020      	BRLO __CMPF122
000554 f031      	BREQ __CMPF123
                 __CMPF121:
000555 9498      	CLZ
000556 9488      	CLC
000557 9508      	RET
                 __CMPF122:
000558 9498      	CLZ
000559 9408      	SEC
00055a 9508      	RET
                 __CMPF123:
00055b 9418      	SEZ
00055c 9488      	CLC
00055d 9508      	RET
                 __CMPF120:
00055e 2377      	TST  R23
00055f f7c2      	BRPL __CMPF122
000560 1797      	CP   R25,R23
000561 f398      	BRLO __CMPF121
000562 f7a9      	BRNE __CMPF122
000563 17ea      	CP   R30,R26
000564 07fb      	CPC  R31,R27
000565 0768      	CPC  R22,R24
000566 f388      	BRLO __CMPF122
000567 f399      	BREQ __CMPF123
000568 cfec      	RJMP __CMPF121
                 
                 __SUBD12:
000569 1bea      	SUB  R30,R26
00056a 0bfb      	SBC  R31,R27
00056b 0b68      	SBC  R22,R24
00056c 0b79      	SBC  R23,R25
00056d 9508      	RET
                 
                 __ANEGD1:
00056e 95f0      	COM  R31
00056f 9560      	COM  R22
000570 9570      	COM  R23
000571 95e1      	NEG  R30
000572 4fff      	SBCI R31,-1
000573 4f6f      	SBCI R22,-1
000574 4f7f      	SBCI R23,-1
000575 9508      	RET
                 
                 __LSLW2:
000576 0fee      	LSL  R30
000577 1fff      	ROL  R31
000578 0fee      	LSL  R30
000579 1fff      	ROL  R31
00057a 9508      	RET
                 
                 __CWD1:
00057b 2f6f      	MOV  R22,R31
00057c 0f66      	ADD  R22,R22
00057d 0b66      	SBC  R22,R22
00057e 2f76      	MOV  R23,R22
00057f 9508      	RET
                 
                 __LTB12U:
000580 17ae      	CP   R26,R30
000581 e0e1      	LDI  R30,1
000582 f008      	BRLO __LTB12U1
000583 27ee      	CLR  R30
                 __LTB12U1:
000584 9508      	RET
                 
                 __GETW1P:
000585 91ed      	LD   R30,X+
000586 91fc      	LD   R31,X
000587 9711      	SBIW R26,1
000588 9508      	RET
                 
                 __GETD1P:
000589 91ed      	LD   R30,X+
00058a 91fd      	LD   R31,X+
00058b 916d      	LD   R22,X+
00058c 917c      	LD   R23,X
00058d 9713      	SBIW R26,3
00058e 9508      	RET
                 
                 __GETD1P_INC:
00058f 91ed      	LD   R30,X+
000590 91fd      	LD   R31,X+
000591 916d      	LD   R22,X+
000592 917d      	LD   R23,X+
000593 9508      	RET
                 
                 __PUTDP1:
000594 93ed      	ST   X+,R30
000595 93fd      	ST   X+,R31
000596 936d      	ST   X+,R22
000597 937c      	ST   X,R23
000598 9508      	RET
                 
                 __PUTDP1_DEC:
000599 937e      	ST   -X,R23
00059a 936e      	ST   -X,R22
00059b 93fe      	ST   -X,R31
00059c 93ee      	ST   -X,R30
00059d 9508      	RET
                 
                 __PUTPARD1:
00059e 937a      	ST   -Y,R23
00059f 936a      	ST   -Y,R22
0005a0 93fa      	ST   -Y,R31
0005a1 93ea      	ST   -Y,R30
0005a2 9508      	RET
                 
                 __SWAPD12:
0005a3 2e18      	MOV  R1,R24
0005a4 2f86      	MOV  R24,R22
0005a5 2d61      	MOV  R22,R1
0005a6 2e19      	MOV  R1,R25
0005a7 2f97      	MOV  R25,R23
0005a8 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0005a9 2e1b      	MOV  R1,R27
0005aa 2fbf      	MOV  R27,R31
0005ab 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0005ac 2e1a      	MOV  R1,R26
0005ad 2fae      	MOV  R26,R30
0005ae 2de1      	MOV  R30,R1
0005af 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  29 r1 :  23 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:   8 r18:   5 r19:   4 r20:  14 r21:  53 r22:  99 r23:  96 
r24:  35 r25:  30 r26:  91 r27:  69 r28:   3 r29:   1 r30: 258 r31: 166 
x  :  20 y  :  72 z  :   0 
Registers used: 20 out of 35 (57.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  24 add   :  22 
adiw  :   3 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   1 brmi  :   7 brne  :  14 brpl  :   7 brsh  :   1 brtc  :   1 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   0 call  :  84 
cbi   :   0 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  22 cls   :   0 clt   :   2 clv   :   0 clz   :   2 com   :   8 
cp    :   7 cpc   :   7 cpi   :  13 cpse  :   0 dec   :   8 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  28 ld    :  19 ldd   :  10 ldi   : 216 
lds   : 121 lpm   :   0 lsl   :  12 lsr   :   2 mov   :  34 movw  :  30 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :   9 pop   :  12 push  :  11 rcall :  30 ret   :  30 
reti  :   1 rjmp  :  43 rol   :  23 ror   :  12 sbc   :  10 sbci  :  11 
sbi   :   3 sbic  :  10 sbis  :   8 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   1 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  59 std   :   4 sts   :  58 sub   :   5 subi  :  24 swap  :   0 
tst   :  15 wdr   :   2 
Instructions used: 70 out of 116 (60.3%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b60   2912      0   2912   32768   8.9%
[.dseg] 0x000100 0x00062b      0    811    811    2303  35.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
