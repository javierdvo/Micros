
AVRASM ver. 2.1.30  C:\Users\Javier\SkyDrive\Documents\Micros\Kitt\List\Kitt.asm Wed Oct 15 12:07:01 2014

                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega328P
                 ;Program type             : Application
                 ;Clock frequency          : 1.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : Off
                 ;Automatic register allocation : Off
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2303
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bff5      	OUT  MCUCR,R31
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000043 e1f8      	LDI  R31,0x18
000044 95a8      	WDR
000045 b7a4      	IN   R26,MCUSR
000046 7fa7      	CBR  R26,8
000047 bfa4      	OUT  MCUSR,R26
000048 93f0 0060 	STS  WDTCSR,R31
00004a 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e0a0      	LDI  R26,LOW(__SRAM_START)
000055 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000056 93ed      	ST   X+,R30
000057 9701      	SBIW R24,1
000058 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0 INITIALIZATION
000059 e0e0      	LDI  R30,__GPIOR0_INIT
00005a bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005c bfed      	OUT  SPL,R30
00005d e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000060 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000061 940c 0099 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ; #include <MEGA328P.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;    #include <delay.h>
                 ;    #include <stdio.h>
                 ;
                 ;
                 ;
                 ;
                 ;void Delay_msKitt(){
                 ; 0000 0008 void Delay_msKitt(){
                 
                 	.CSEG
                 _Delay_msKitt:
                 ; 0000 0009     if(PINB.2==0){
000063 991a      	SBIC 0x3,2
000064 c01a      	RJMP _0x3
                 ; 0000 000A         if(PINB.1==0){
000065 9919      	SBIC 0x3,1
000066 c00c      	RJMP _0x4
                 ; 0000 000B             if(PINB.0==0){
000067 9918      	SBIC 0x3,0
000068 c003      	RJMP _0x5
                 ; 0000 000C                 delay_ms(100);
000069 e6e4      	LDI  R30,LOW(100)
00006a e0f0      	LDI  R31,HIGH(100)
00006b c002      	RJMP _0xD3
                 ; 0000 000D 
                 ; 0000 000E             }
                 ; 0000 000F             else{
                 _0x5:
                 ; 0000 0010                 delay_ms(200);
00006c ece8      	LDI  R30,LOW(200)
00006d e0f0      	LDI  R31,HIGH(200)
                 _0xD3:
00006e 93fa      	ST   -Y,R31
00006f 93ea      	ST   -Y,R30
000070 940e 0127 	CALL _delay_ms
                 ; 0000 0011             }
                 ; 0000 0012 
                 ; 0000 0013          }
                 ; 0000 0014          else{
000072 c00b      	RJMP _0x7
                 _0x4:
                 ; 0000 0015          if(PINB.0==0){
000073 9918      	SBIC 0x3,0
000074 c003      	RJMP _0x8
                 ; 0000 0016                 delay_ms(300);
000075 e2ec      	LDI  R30,LOW(300)
000076 e0f1      	LDI  R31,HIGH(300)
000077 c002      	RJMP _0xD4
                 ; 0000 0017 
                 ; 0000 0018             }
                 ; 0000 0019             else{
                 _0x8:
                 ; 0000 001A                 delay_ms(400);
000078 e9e0      	LDI  R30,LOW(400)
000079 e0f1      	LDI  R31,HIGH(400)
                 _0xD4:
00007a 93fa      	ST   -Y,R31
00007b 93ea      	ST   -Y,R30
00007c 940e 0127 	CALL _delay_ms
                 ; 0000 001B             }
                 ; 0000 001C          }
                 _0x7:
                 ; 0000 001D     }
                 ; 0000 001E     else {
00007e c019      	RJMP _0xA
                 _0x3:
                 ; 0000 001F          if(PINB.1==0){
00007f 9919      	SBIC 0x3,1
000080 c00c      	RJMP _0xB
                 ; 0000 0020             if(PINB.0==0){
000081 9918      	SBIC 0x3,0
000082 c003      	RJMP _0xC
                 ; 0000 0021                 delay_ms(500);
000083 efe4      	LDI  R30,LOW(500)
000084 e0f1      	LDI  R31,HIGH(500)
000085 c002      	RJMP _0xD5
                 ; 0000 0022 
                 ; 0000 0023             }
                 ; 0000 0024             else{
                 _0xC:
                 ; 0000 0025                 delay_ms(600);
000086 e5e8      	LDI  R30,LOW(600)
000087 e0f2      	LDI  R31,HIGH(600)
                 _0xD5:
000088 93fa      	ST   -Y,R31
000089 93ea      	ST   -Y,R30
00008a 940e 0127 	CALL _delay_ms
                 ; 0000 0026             }
                 ; 0000 0027 
                 ; 0000 0028          }
                 ; 0000 0029          else{
00008c c00b      	RJMP _0xE
                 _0xB:
                 ; 0000 002A          if(PINB.0==0){
00008d 9918      	SBIC 0x3,0
00008e c003      	RJMP _0xF
                 ; 0000 002B                 delay_ms(700);
00008f ebec      	LDI  R30,LOW(700)
000090 e0f2      	LDI  R31,HIGH(700)
000091 c002      	RJMP _0xD6
                 ; 0000 002C 
                 ; 0000 002D             }
                 ; 0000 002E             else{
                 _0xF:
                 ; 0000 002F                 delay_ms(800);
000092 e2e0      	LDI  R30,LOW(800)
000093 e0f3      	LDI  R31,HIGH(800)
                 _0xD6:
000094 93fa      	ST   -Y,R31
000095 93ea      	ST   -Y,R30
000096 940e 0127 	CALL _delay_ms
                 ; 0000 0030             }
                 ; 0000 0031          }
                 _0xE:
                 ; 0000 0032     }
                 _0xA:
                 ; 0000 0033 
                 ; 0000 0034 }
000098 9508      	RET
                 ;
                 ;void main()
                 ; 0000 0037 {
                 _main:
                 ; 0000 0038     DDRD=0xFF;
000099 efef      	LDI  R30,LOW(255)
00009a b9ea      	OUT  0xA,R30
                 ; 0000 0039     PORTB.0=1;
00009b 9a28      	SBI  0x5,0
                 ; 0000 003A     PORTB.1=1;
00009c 9a29      	SBI  0x5,1
                 ; 0000 003B     PORTB.2=1;
00009d 9a2a      	SBI  0x5,2
                 ; 0000 003C     PORTC.0=1;
00009e 9a40      	SBI  0x8,0
                 ; 0000 003D     while(1)
                 _0x19:
                 ; 0000 003E     {
                 ; 0000 003F 
                 ; 0000 0040         if(PINC.0==0){
00009f 9930      	SBIC 0x6,0
0000a0 c04c      	RJMP _0x1C
                 ; 0000 0041                 if(PINC.0==1){
0000a1 9930      	SBIC 0x6,0
                 ; 0000 0042 
                 ; 0000 0043                 }
                 ; 0000 0044                 else{
0000a2 c002      	RJMP _0x1E
                 ; 0000 0045                 PORTD.0=1;
0000a3 9a58      	SBI  0xB,0
                 ; 0000 0046                 Delay_msKitt();
0000a4 dfbe      	RCALL _Delay_msKitt
                 ; 0000 0047                 }
                 _0x1E:
                 ; 0000 0048                 if(PINC.0==1){
0000a5 9930      	SBIC 0x6,0
                 ; 0000 0049 
                 ; 0000 004A                 }
                 ; 0000 004B                 else{
0000a6 c003      	RJMP _0x22
                 ; 0000 004C                 PORTD.0=0;
0000a7 9858      	CBI  0xB,0
                 ; 0000 004D                 PORTD.1=1;
0000a8 9a59      	SBI  0xB,1
                 ; 0000 004E                 Delay_msKitt();
0000a9 dfb9      	RCALL _Delay_msKitt
                 ; 0000 004F                 }
                 _0x22:
                 ; 0000 0050                 if(PINC.0==1){
0000aa 9930      	SBIC 0x6,0
                 ; 0000 0051 
                 ; 0000 0052                 }
                 ; 0000 0053                 else{
0000ab c003      	RJMP _0x28
                 ; 0000 0054                 PORTD.1=0;
0000ac 9859      	CBI  0xB,1
                 ; 0000 0055                 PORTD.2=1;
0000ad 9a5a      	SBI  0xB,2
                 ; 0000 0056                 Delay_msKitt();
0000ae dfb4      	RCALL _Delay_msKitt
                 ; 0000 0057                 }
                 _0x28:
                 ; 0000 0058                 if(PINC.0==1){
0000af 9930      	SBIC 0x6,0
                 ; 0000 0059 
                 ; 0000 005A                 }
                 ; 0000 005B                 else{
0000b0 c003      	RJMP _0x2E
                 ; 0000 005C                 PORTD.2=0;
0000b1 985a      	CBI  0xB,2
                 ; 0000 005D                 PORTD.3=1;
0000b2 9a5b      	SBI  0xB,3
                 ; 0000 005E                 Delay_msKitt();
0000b3 dfaf      	RCALL _Delay_msKitt
                 ; 0000 005F                 }
                 _0x2E:
                 ; 0000 0060                 if(PINC.0==1){
0000b4 9930      	SBIC 0x6,0
                 ; 0000 0061 
                 ; 0000 0062                 }
                 ; 0000 0063                 else{
0000b5 c003      	RJMP _0x34
                 ; 0000 0064                 PORTD.3=0;
0000b6 985b      	CBI  0xB,3
                 ; 0000 0065                 PORTD.4=1;
0000b7 9a5c      	SBI  0xB,4
                 ; 0000 0066                 Delay_msKitt();
0000b8 dfaa      	RCALL _Delay_msKitt
                 ; 0000 0067                 }
                 _0x34:
                 ; 0000 0068                 if(PINC.0==1){
0000b9 9930      	SBIC 0x6,0
                 ; 0000 0069 
                 ; 0000 006A                 }
                 ; 0000 006B                 else{
0000ba c003      	RJMP _0x3A
                 ; 0000 006C                 PORTD.4=0;
0000bb 985c      	CBI  0xB,4
                 ; 0000 006D                 PORTD.5=1;
0000bc 9a5d      	SBI  0xB,5
                 ; 0000 006E                 Delay_msKitt();
0000bd dfa5      	RCALL _Delay_msKitt
                 ; 0000 006F                 }
                 _0x3A:
                 ; 0000 0070                 if(PINC.0==1){
0000be 9930      	SBIC 0x6,0
                 ; 0000 0071 
                 ; 0000 0072                 }
                 ; 0000 0073                 else{
0000bf c003      	RJMP _0x40
                 ; 0000 0074                 PORTD.5=0;
0000c0 985d      	CBI  0xB,5
                 ; 0000 0075                 PORTD.6=1;
0000c1 9a5e      	SBI  0xB,6
                 ; 0000 0076                 Delay_msKitt();
0000c2 dfa0      	RCALL _Delay_msKitt
                 ; 0000 0077                 }
                 _0x40:
                 ; 0000 0078                 if(PINC.0==1){
0000c3 9930      	SBIC 0x6,0
                 ; 0000 0079 
                 ; 0000 007A                 }
                 ; 0000 007B                 else{
0000c4 c003      	RJMP _0x46
                 ; 0000 007C                 PORTD.6=0;
0000c5 985e      	CBI  0xB,6
                 ; 0000 007D                 PORTD.7=1;
0000c6 9a5f      	SBI  0xB,7
                 ; 0000 007E                 Delay_msKitt();
0000c7 df9b      	RCALL _Delay_msKitt
                 ; 0000 007F                 }
                 _0x46:
                 ; 0000 0080                 if(PINC.0==1){
0000c8 9930      	SBIC 0x6,0
                 ; 0000 0081 
                 ; 0000 0082                 }
                 ; 0000 0083                 else{
0000c9 c003      	RJMP _0x4C
                 ; 0000 0084                 PORTD.7=0;
0000ca 985f      	CBI  0xB,7
                 ; 0000 0085                 PORTD.6=1;
0000cb 9a5e      	SBI  0xB,6
                 ; 0000 0086                 Delay_msKitt();
0000cc df96      	RCALL _Delay_msKitt
                 ; 0000 0087                 }
                 _0x4C:
                 ; 0000 0088                 if(PINC.0==1){
0000cd 9930      	SBIC 0x6,0
                 ; 0000 0089 
                 ; 0000 008A                 }
                 ; 0000 008B                 else{
0000ce c003      	RJMP _0x52
                 ; 0000 008C                 PORTD.6=0;
0000cf 985e      	CBI  0xB,6
                 ; 0000 008D                 PORTD.5=1;
0000d0 9a5d      	SBI  0xB,5
                 ; 0000 008E                 Delay_msKitt();
0000d1 df91      	RCALL _Delay_msKitt
                 ; 0000 008F                 }
                 _0x52:
                 ; 0000 0090                 if(PINC.0==1){
0000d2 9930      	SBIC 0x6,0
                 ; 0000 0091 
                 ; 0000 0092                 }
                 ; 0000 0093                 else{
0000d3 c003      	RJMP _0x58
                 ; 0000 0094                 PORTD.5=0;
0000d4 985d      	CBI  0xB,5
                 ; 0000 0095                 PORTD.4=1;
0000d5 9a5c      	SBI  0xB,4
                 ; 0000 0096                 Delay_msKitt();
0000d6 df8c      	RCALL _Delay_msKitt
                 ; 0000 0097                 }
                 _0x58:
                 ; 0000 0098                 if(PINC.0==1){
0000d7 9930      	SBIC 0x6,0
                 ; 0000 0099 
                 ; 0000 009A                 }
                 ; 0000 009B                 else{
0000d8 c003      	RJMP _0x5E
                 ; 0000 009C                 PORTD.4=0;
0000d9 985c      	CBI  0xB,4
                 ; 0000 009D                 PORTD.3=1;
0000da 9a5b      	SBI  0xB,3
                 ; 0000 009E                 Delay_msKitt();
0000db df87      	RCALL _Delay_msKitt
                 ; 0000 009F                 }
                 _0x5E:
                 ; 0000 00A0                 if(PINC.0==1){
0000dc 9930      	SBIC 0x6,0
                 ; 0000 00A1 
                 ; 0000 00A2                 }
                 ; 0000 00A3                 else{
0000dd c003      	RJMP _0x64
                 ; 0000 00A4                 PORTD.3=0;
0000de 985b      	CBI  0xB,3
                 ; 0000 00A5                 PORTD.2=1;
0000df 9a5a      	SBI  0xB,2
                 ; 0000 00A6                 Delay_msKitt();
0000e0 df82      	RCALL _Delay_msKitt
                 ; 0000 00A7                 }
                 _0x64:
                 ; 0000 00A8                 if(PINC.0==1){
0000e1 9930      	SBIC 0x6,0
                 ; 0000 00A9 
                 ; 0000 00AA                 }
                 ; 0000 00AB                 else{
0000e2 c003      	RJMP _0x6A
                 ; 0000 00AC                 PORTD.2=0;
0000e3 985a      	CBI  0xB,2
                 ; 0000 00AD                 PORTD.1=1;
0000e4 9a59      	SBI  0xB,1
                 ; 0000 00AE                 Delay_msKitt();
0000e5 df7d      	RCALL _Delay_msKitt
                 ; 0000 00AF                 }
                 _0x6A:
                 ; 0000 00B0                 if(PINC.0==1){
0000e6 9b30      	SBIS 0x6,0
0000e7 c003      	RJMP _0x6F
                 ; 0000 00B1                 PORTD.0=0;
0000e8 940e 011e 	CALL SUBOPT_0x0
                 ; 0000 00B2                 PORTD.1=0;
                 ; 0000 00B3                 PORTD.2=0;
                 ; 0000 00B4                 PORTD.3=0;
                 ; 0000 00B5                 PORTD.4=0;
                 ; 0000 00B6                 PORTD.5=0;
                 ; 0000 00B7                 PORTD.6=0;
                 ; 0000 00B8                 PORTD.7=0;
                 ; 0000 00B9                 }
                 ; 0000 00BA                 else{
0000ea c001      	RJMP _0x80
                 _0x6F:
                 ; 0000 00BB                 PORTD.1=0;
0000eb 9859      	CBI  0xB,1
                 ; 0000 00BC                 }
                 _0x80:
                 ; 0000 00BD         }
                 ; 0000 00BE         else{
0000ec c02f      	RJMP _0x83
                 _0x1C:
                 ; 0000 00BF                 if(PINC.0==0){
0000ed 9b30      	SBIS 0x6,0
                 ; 0000 00C0 
                 ; 0000 00C1                 }
                 ; 0000 00C2                 else{
0000ee c003      	RJMP _0x85
                 ; 0000 00C3                 PORTD.0=1;
0000ef 9a58      	SBI  0xB,0
                 ; 0000 00C4                 PORTD.7=1;
0000f0 9a5f      	SBI  0xB,7
                 ; 0000 00C5                 Delay_msKitt();
0000f1 df71      	RCALL _Delay_msKitt
                 ; 0000 00C6                 }
                 _0x85:
                 ; 0000 00C7                 if(PINC.0==0){
0000f2 9b30      	SBIS 0x6,0
                 ; 0000 00C8 
                 ; 0000 00C9                 }
                 ; 0000 00CA                 else{
0000f3 c005      	RJMP _0x8B
                 ; 0000 00CB                 PORTD.1=1;
0000f4 9a59      	SBI  0xB,1
                 ; 0000 00CC                 PORTD.6=1;
0000f5 9a5e      	SBI  0xB,6
                 ; 0000 00CD                 PORTD.0=0;
0000f6 9858      	CBI  0xB,0
                 ; 0000 00CE                 PORTD.7=0;
0000f7 985f      	CBI  0xB,7
                 ; 0000 00CF                 Delay_msKitt();
0000f8 df6a      	RCALL _Delay_msKitt
                 ; 0000 00D0                 }
                 _0x8B:
                 ; 0000 00D1                 if(PINC.0==0){
0000f9 9b30      	SBIS 0x6,0
                 ; 0000 00D2 
                 ; 0000 00D3                 }
                 ; 0000 00D4                 else{
0000fa c005      	RJMP _0x95
                 ; 0000 00D5                 PORTD.2=1;
0000fb 9a5a      	SBI  0xB,2
                 ; 0000 00D6                 PORTD.5=1;
0000fc 9a5d      	SBI  0xB,5
                 ; 0000 00D7                 PORTD.1=0;
0000fd 9859      	CBI  0xB,1
                 ; 0000 00D8                 PORTD.6=0;
0000fe 985e      	CBI  0xB,6
                 ; 0000 00D9                 Delay_msKitt();
0000ff df63      	RCALL _Delay_msKitt
                 ; 0000 00DA                 }
                 _0x95:
                 ; 0000 00DB                 if(PINC.0==0){
000100 9b30      	SBIS 0x6,0
                 ; 0000 00DC 
                 ; 0000 00DD                 }
                 ; 0000 00DE                 else{
000101 c005      	RJMP _0x9F
                 ; 0000 00DF                 PORTD.3=1;
000102 9a5b      	SBI  0xB,3
                 ; 0000 00E0                 PORTD.4=1;
000103 9a5c      	SBI  0xB,4
                 ; 0000 00E1                 PORTD.2=0;
000104 985a      	CBI  0xB,2
                 ; 0000 00E2                 PORTD.5=0;
000105 985d      	CBI  0xB,5
                 ; 0000 00E3                 Delay_msKitt();
000106 df5c      	RCALL _Delay_msKitt
                 ; 0000 00E4                 }
                 _0x9F:
                 ; 0000 00E5                 if(PINC.0==0){
000107 9b30      	SBIS 0x6,0
                 ; 0000 00E6                 }
                 ; 0000 00E7                 else{
000108 c005      	RJMP _0xA9
                 ; 0000 00E8                 PORTD.2=1;
000109 9a5a      	SBI  0xB,2
                 ; 0000 00E9                 PORTD.5=1;
00010a 9a5d      	SBI  0xB,5
                 ; 0000 00EA                 PORTD.3=0;
00010b 985b      	CBI  0xB,3
                 ; 0000 00EB                 PORTD.4=0;
00010c 985c      	CBI  0xB,4
                 ; 0000 00EC                 Delay_msKitt();
00010d df55      	RCALL _Delay_msKitt
                 ; 0000 00ED                 }
                 _0xA9:
                 ; 0000 00EE                 if(PINC.0==0){
00010e 9b30      	SBIS 0x6,0
                 ; 0000 00EF 
                 ; 0000 00F0                 }
                 ; 0000 00F1                 else{
00010f c005      	RJMP _0xB3
                 ; 0000 00F2                 PORTD.1=1;
000110 9a59      	SBI  0xB,1
                 ; 0000 00F3                 PORTD.6=1;
000111 9a5e      	SBI  0xB,6
                 ; 0000 00F4                 PORTD.2=0;
000112 985a      	CBI  0xB,2
                 ; 0000 00F5                 PORTD.5=0;
000113 985d      	CBI  0xB,5
                 ; 0000 00F6                 Delay_msKitt();
000114 df4e      	RCALL _Delay_msKitt
                 ; 0000 00F7                 }
                 _0xB3:
                 ; 0000 00F8                 if(PINC.0==0){
000115 9930      	SBIC 0x6,0
000116 c003      	RJMP _0xBC
                 ; 0000 00F9                 PORTD.0=0;
000117 940e 011e 	CALL SUBOPT_0x0
                 ; 0000 00FA                 PORTD.1=0;
                 ; 0000 00FB                 PORTD.2=0;
                 ; 0000 00FC                 PORTD.3=0;
                 ; 0000 00FD                 PORTD.4=0;
                 ; 0000 00FE                 PORTD.5=0;
                 ; 0000 00FF                 PORTD.6=0;
                 ; 0000 0100                 PORTD.7=0;
                 ; 0000 0101                 }
                 ; 0000 0102                 else{
000119 c002      	RJMP _0xCD
                 _0xBC:
                 ; 0000 0103                 PORTD.1=0;
00011a 9859      	CBI  0xB,1
                 ; 0000 0104                 PORTD.6=0;
00011b 985e      	CBI  0xB,6
                 ; 0000 0105                 }
                 _0xCD:
                 ; 0000 0106 
                 ; 0000 0107 
                 ; 0000 0108         }
                 _0x83:
                 ; 0000 0109     }
00011c cf82      	RJMP _0x19
                 ; 0000 010A }
                 _0xD2:
00011d cfff      	RJMP _0xD2
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00011e 9858      	CBI  0xB,0
00011f 9859      	CBI  0xB,1
000120 985a      	CBI  0xB,2
000121 985b      	CBI  0xB,3
000122 985c      	CBI  0xB,4
000123 985d      	CBI  0xB,5
000124 985e      	CBI  0xB,6
000125 985f      	CBI  0xB,7
000126 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000127 91e9      	ld   r30,y+
000128 91f9      	ld   r31,y+
000129 9630      	adiw r30,0
00012a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00012b ef8a     +LDI R24 , LOW ( 0xFA )
00012c e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00012d 9701     +SBIW R24 , 1
00012e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00012f 95a8      	wdr
000130 9731      	sbiw r30,1
000131 f7c9      	brne __delay_ms0
                 __delay_ms1:
000132 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   2 r26:   5 r27:   2 r28:   1 r29:   1 r30:  29 r31:  17 
x  :   2 y  :  10 z  :   0 
Registers used: 10 out of 35 (28.6%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   4 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   6 
cbi   :  34 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :   0 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   0 jmp   :  27 ld    :   2 ldd   :   0 ldi   :  32 
lds   :   0 lpm   :   0 lsl   :   0 lsr   :   0 mov   :   0 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :   8 pop   :   0 push  :   0 rcall :  20 ret   :   3 
reti  :   0 rjmp  :  42 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :  30 sbic  :  23 sbis  :   7 sbiw  :   3 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  10 std   :   0 sts   :   2 sub   :   0 subi  :   0 swap  :   0 
tst   :   0 wdr   :   2 
Instructions used: 24 out of 116 (20.7%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000266    596     18    614   32768   1.9%
[.dseg] 0x000100 0x000300      0      0      0    2303   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
